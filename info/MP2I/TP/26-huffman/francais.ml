(* En Français, la longueur d'un mot est de 4.8 caractère en moyenne (dans l'usage).
   Ceci signifie que l'espace apparait 1 fois sur 4.8, soit avec une fréquence de 20.83%.
   Les autres lettres ont des fréquences données par https://fr.wikipedia.org/wiki/Fréquence_d'apparition_des_lettres;
   ce sont les fréquences qui ont été utilisées.
   Il faudrait multiplier toutes ces fréquences par 79.16/100 pour prendre en compte les espaces dans les pourcentages.
   De manière équivalente, on multiplie la fréquence des espaces par 100*79.16 pour que les rapports entre "fréquences" restent les mêmes
   avec le moins de modifications possibles. *)
(* Remarque : plein de caractères ont été ignorés, comme les accents et la ponctuation. L'important est seulement le rapport entre les fréquences. *)


let lettres =       [| ' '; 'a'; 'b';   'c';   'd';   'e';  'f';  'g'; 'h';  'i';  'j';  'k';  'l';  'm';  'n';  'o';  'p';  'q';  'r';  's';  't';  'u';  'v';  'w'; 'x';  'y';  'z'|]
let frequences = [| 26.316; 7.11; 1.14; 3.18; 3.67; 12.10; 1.11; 1.23; 1.11; 6.59; 0.34; 0.29; 4.96; 2.62; 6.39; 5.02; 2.49; 0.65; 6.07; 6.51; 5.92; 4.49; 1.11; 0.17; 0.38; 0.46; 0.15|]

let rec construit_couples lettres freq = match (lettres, freq) with
  [],[] -> []
  | [],_ |_,[] -> failwith "longueurs incompatibles"
  | tl::ql, tf::qf -> (tl,tf) :: construit_couples ql qf

let lettres_avec_frequences = construit_couples (Array.to_list lettres) (Array.to_list frequences)
(* la liste lettres_avec_frequences contient les couples (l,f) des lettres de l'alphabet utilisé dans la langue française (sans ponctuation ni accent), i.e.
   [(' ', 26.316); ('a', 7.11); ('b', 1.14); ... ]*)

type arbre_code =
  | F of char
  | N of arbre_code * arbre_code


(* arbre de code pour les fréquences d'apparition dans la langue Française : *)
let arbre_francais = 
 N
  (N (N (N (F 't', F 'r'), F 'e'),
    N (N (F 'n', F 's'),
     N (F 'i',
      N (F 'c',
       N (N (F 'q', N (F 'j', F 'x')),
        N (N (F 'y', N (F 'k', N (F 'z', F 'w'))), F 'f')))))),
  N (F ' ',
   N (N (F 'a', N (F 'd', F 'u')),
    N (N (N (N (F 'h', F 'v'), N (F 'b', F 'g')), F 'l'),
     N (F 'o', N (F 'p', F 'm'))))))


let mystere = "11100011111011011010110110011100010010111110110101111100010001110101101110110011011100111101000111011"
let mystere2 = "0101110011101110110000100010000101111110010001011100110101111101111011011000110111010011011111011110011001010101111100100"
let mystere




(* --- Affichage progressif d'un qui ressemble beaucoup à celui de utop : --- *)
(* pour aider vos tests *)
let rec taille arbre = match arbre with
  F c -> 0
  | N(a,b) -> (taille a) + (taille b) + 1

let affiche_arbre a =
  let rec affiche_arbre_aux dec a b = match a with
    |F(c) -> if b then print_string (String.make dec ' ');
      Printf.printf "F '%c'" c
    |N(a1,a2) -> let t1 = taille a1 in
      let t2 = taille a2 in
      if t1 >= 4 then begin
        if b then print_string (String.make dec ' ');
        Printf.printf "N \n";
        print_string (String.make (dec+1) ' '); print_string "(";
        affiche_arbre_aux (dec+2) a1 false;
        print_string ",\n";
        affiche_arbre_aux (dec + 2) a2 true;
        print_string ")" end
      else begin
        if t2 >= 3 then begin
          if b then  print_string (String.make dec ' ');
          Printf.printf "N (";
          affiche_arbre_aux (dec + 1) a1 false;
          print_string ",\n";
          affiche_arbre_aux (dec+1) a2 true;
          print_string ")"
        end
        else begin
          if b then print_string (String.make dec ' ');
          Printf.printf "N (";
          affiche_arbre_aux (dec+1) a1 false;
          print_string ", ";
          affiche_arbre_aux (dec+1) a2 false;
          print_string ")"
        end
      end
  in affiche_arbre_aux 0 a true

